// Code generated by MockGen. DO NOT EDIT.
// Source: payment_gateway/internal/store (interfaces: PaymentStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	payment "payment_gateway/internal/payment"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPaymentStore is a mock of PaymentStore interface.
type MockPaymentStore struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentStoreMockRecorder
}

// MockPaymentStoreMockRecorder is the mock recorder for MockPaymentStore.
type MockPaymentStoreMockRecorder struct {
	mock *MockPaymentStore
}

// NewMockPaymentStore creates a new mock instance.
func NewMockPaymentStore(ctrl *gomock.Controller) *MockPaymentStore {
	mock := &MockPaymentStore{ctrl: ctrl}
	mock.recorder = &MockPaymentStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentStore) EXPECT() *MockPaymentStoreMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPaymentStore) Get(arg0 context.Context, arg1 string) (*payment.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*payment.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPaymentStoreMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPaymentStore)(nil).Get), arg0, arg1)
}

// Save mocks base method.
func (m *MockPaymentStore) Save(arg0 context.Context, arg1 *payment.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockPaymentStoreMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPaymentStore)(nil).Save), arg0, arg1)
}
